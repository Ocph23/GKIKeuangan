@layout BPPGLayout
@page "/bppg/kas"



<div class="mt-15 no-print">

    <div style="display:flex;justify-content:space-between">
        <div>
            <h4>
                Data Periode Kas
            </h4>
        </div>
      
    </div>

    <MudTable Class="p-2" ServerData="@(new Func<TableState, Task<TableData<PeriodeKas>>>(ServerReload))" Dense="true" Hover="true"
              @ref="table">
        <ToolBarContent>
            <div style="width:150px !important">
                <MudSelect Style="width:100px" T="Periode" Label="Periode" ValueChanged="OnSelectPeriode">
                    @foreach (var item in periodes)
                    {
                        <MudSelectItem Value="item">@item.Tahun</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <MudSpacer></MudSpacer>
            <div>
                <MudMenu Label="@(periodeSelected==null?"":periodeSelected.Status== StatusKas.Tutup?"MENUNGGU PERSETUJUAN":
                periodeSelected.Status== StatusKas.Baru?"Aktif":periodeSelected.Status.ToString())" Color="@Color.Warning">
                    @if (periodeSelected.Status == StatusKas.Tutup)
                    {
                        <MudMenuItem OnClick="@(()=>Persetujuan(StatusKas.Setujui))">Setuju</MudMenuItem>
                        <MudMenuItem OnClick="@(()=>Persetujuan(StatusKas.Ditolak))">Tolak</MudMenuItem>
                    }
                </MudMenu>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="nr_field" T="PeriodeKas">Bulan</MudTableSortLabel>
            </MudTh>
            <MudTh Style="text-align:right">Saldo Awal</MudTh>
            <MudTh Style="text-align:right">Penerimaan</MudTh>
            <MudTh Style="text-align:right">Pengeluaran</MudTh>
            <MudTh Style="text-align:right">Saldo</MudTh>
            <MudTh Style="text-align:right">Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Tanggal">@(Helper.GetBulan(context.Bulan))</MudTd>
                <MudTd Style="text-align:right">@context.SaldoLalu.ToString("N2")</MudTd>
                <MudTd Style="text-align:right">@context.Penerimaan.ToString("N2")</MudTd>
                <MudTd Style="text-align:right">@context.Pengeluaran.ToString("N2")</MudTd>
                <MudTd Style="text-align:right">@context.Saldo.ToString("N2")</MudTd>
                <MudTd Style="text-align:right">@context.Status</MudTd>
                <MudTd Style="text-align:right">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(()=>LaporanKas(context))">Detail Kas</MudMenuItem>
                        @if (context.Status == StatusKas.Tutup)
                    {
                        <MudMenuItem OnClick="@(()=>ChangeStatus(StatusKas.Ditolak, context))">Tolak</MudMenuItem>
                        <MudMenuItem OnClick="@(()=>ChangeStatus(StatusKas.Setujui, context))">Setuju</MudMenuItem>
                    }
                </MudMenu>
            </MudTd>

        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@if (kasBulanPrint != null && kasBulanPrint.Value)
{
    <MainApp.Pages.Reports.KasBulanPrint PeriodeKas="periodeKasSelected" Datas="dataPrint" />
}

@inject IAkunService akunService
@inject IKasService kasService
@inject IDialogService DialogService
@inject IJSRuntime Js
@inject AuthenticationStateProvider authStateProvider

@code {

    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IPeriodeService? PeriodeService { get; set; }

    private IEnumerable<PeriodeKas> pagedData = Enumerable.Empty<PeriodeKas>();
    private IEnumerable<PeriodeKas> sources = Enumerable.Empty<PeriodeKas>();
    private IEnumerable<Kas> dataPrint = Enumerable.Empty<Kas>();

    ICollection<PeriodeKas> periodeKas = new List<PeriodeKas>();
    private MudTable<PeriodeKas> table;
    private IEnumerable<Periode> periodes;
    private int totalItems;
    private string searchString;

    bool isDisable = true;
    Periode periodeSelected;

    PeriodeKasModel periodeModel;

    bool? kasBulanPrint;

    private List<PosisiKasModel> DataPrint = new List<PosisiKasModel>();

    AuthenticationState authState;

    PeriodeKas periodeKasSelected;

    protected override async Task OnInitializedAsync()
    {
        periodes = await PeriodeService.Get();

        authState = await authStateProvider.GetAuthenticationStateAsync();
    }
    async Task OnSelectPeriode(Periode p)
    {
        if (p == null)
            return;

        periodeSelected = p;
        isDisable = p.Status != StatusKas.Baru;
        periodeKasSelected = null;
        kasBulanPrint = null;
        await table.ReloadServerData();
    }

    async Task ChangeStatus(StatusKas status, PeriodeKas kas)
    {
        if (kas != null)
        {

            var parameters = new DialogParameters<Dialog>();
            parameters.Add(x => x.ContentText, $"Yakin {status} Kas Bulan {Helper.GetBulan(kas.Bulan)} ?");
            parameters.Add(x => x.ButtonText, "Ya");
            parameters.Add(x => x.Color, Color.Error);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
            var dialog = await DialogService.ShowAsync<Dialog>("Ubah", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                try
                {
                    kas.Status = status;
                    var deleted = await kasService.PersetujuanPeriodeKas(kas);
                    if (deleted)
                    {
                        await table.ReloadServerData();
                        Snackbar?.Add("Data berhasil diubah !", MudBlazor.Severity.Error);
                        return;
                    }
                    throw new SystemException("Data tidak berhasil disimpan !");
                }
                catch (Exception ex)
                {
                    Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
                }


            }
        }
    }


    async Task Persetujuan(StatusKas status)
    {
        if (periodeSelected != null)
        {

            var parameters = new DialogParameters<Dialog>();
            parameters.Add(x => x.ContentText, $"Yakin {status} Tahun Buku {periodeSelected.Tahun} ?");
            parameters.Add(x => x.ButtonText, "Ya");
            parameters.Add(x => x.Color, Color.Error);
            var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
            var dialog = await DialogService.ShowAsync<Dialog>("Ubah", parameters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                try
                {
                    periodeSelected.Status = status;
                    var deleted = await PeriodeService.Put(periodeSelected.Id, periodeSelected);
                    if (deleted)
                    {
                        await table.ReloadServerData();
                        Snackbar?.Add("Data berhasil diubah !", MudBlazor.Severity.Error);
                        return;
                    }
                    throw new SystemException("Data tidak berhasil disimpan !");
                }
                catch (Exception ex)
                {
                    Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
                }


            }
        }
    }



    async Task LaporanKas(PeriodeKas bulainIni)
    {

        kasBulanPrint = true;
        periodeKasSelected = bulainIni;
        if (periodeKasSelected != null)
        {
            try
            {
                var periodeLastKas = await kasService.GetLastPeriodeKas(bulainIni);
                var kas = await kasService.Get(bulainIni.Mulai, bulainIni.Berakhir);
                dataPrint = kas;
                DataPrint = new List<PosisiKasModel>();
                DataPrint.Add(new PosisiKasModel()
                    {
                        Uraian = "Jumlah Bulan Ini ",
                        Penerimaan = kas.Where(x => x.Akun.Tipe == AkunType.Penerimaan).Sum(x => x.Jumlah),
                        Pengeluaran = kas.Where(x => x.Akun.Tipe == AkunType.Pengeluaran).Sum(x => x.Jumlah),
                    });
                if (periodeKas.Count() == 2)
                {
                    var bulainlalu = periodeKas.ToArray()[1];
                    DataPrint.Add(new PosisiKasModel()
                        {
                            Uraian = "Jumlah Bulan Lalu ",
                            Penerimaan = bulainlalu.Penerimaan,
                            Pengeluaran = bulainlalu.Pengeluaran
                        });
                }

                var semua = new PosisiKasModel()
                    {
                        Uraian = "Jumlah Semua",
                        Penerimaan = DataPrint.Sum(x => x.Penerimaan),
                        Pengeluaran = DataPrint.Sum(x => x.Pengeluaran),
                    };
                DataPrint.Add(semua);

                DataPrint.Add(new PosisiKasModel()
                    {
                        Uraian = "Saldo",
                        Saldo = semua.Penerimaan - semua.Pengeluaran
                    });

                await InvokeAsync(() => StateHasChanged());

                await Task.Delay(500);
                await Js.InvokeVoidAsync("print");
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task LaporanPosisiKas()
    {
        try
        {
            var periodeKas = await kasService.GetPeriodeKasForPosisiKas();
            var bulainIni = periodeKas.ToArray()[0];

            var kas = await kasService.Get(bulainIni.Mulai, bulainIni.Berakhir);

            periodeModel = new PeriodeKasModel(bulainIni, kas);

            DataPrint = new List<PosisiKasModel>();
            DataPrint.Add(new PosisiKasModel()
                {
                    Uraian = "Jumlah Bulan Ini ",
                    Penerimaan = periodeModel.Penerimaan,
                    Pengeluaran = periodeModel.Pengeluaran,
                });
            if (periodeKas.Count() == 2)
            {
                var bulainlalu = periodeKas.ToArray()[1];
                DataPrint.Add(new PosisiKasModel()
                    {
                        Uraian = "Jumlah Bulan Lalu ",
                        Penerimaan = bulainlalu.Penerimaan,
                        Pengeluaran = bulainlalu.Pengeluaran
                    });
            }

            var semua = new PosisiKasModel()
                {
                    Uraian = "Jumlah Semua",
                    Penerimaan = DataPrint.Sum(x => x.Penerimaan),
                    Pengeluaran = DataPrint.Sum(x => x.Pengeluaran),
                };
            DataPrint.Add(semua);

            DataPrint.Add(new PosisiKasModel()
                {
                    Uraian = "Saldo",
                    Saldo = semua.Penerimaan - semua.Pengeluaran
                });

            await InvokeAsync(() => StateHasChanged());
            kasBulanPrint = false;
            await Task.Delay(500);
            await Js.InvokeVoidAsync("print");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }



    private async Task<TableData<PeriodeKas>> ServerReload(TableState state)
    {
        if (periodeSelected != null)
        {
            IEnumerable<PeriodeKas>? data = await kasService.GetPeriodeKasByPeriodeId(periodeSelected.Id);
            await Task.Delay(300);
            data = data.Where(element =>
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                return false;
            }).ToArray();
            totalItems = data.Count();
            switch (state.SortLabel)
            {
                case "nr_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Bulan);
                    break;
                case "description_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Mulai);
                    break;
            }
            pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }
        return new TableData<PeriodeKas>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    async Task Add()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<KasDialog>("Tambah", options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }


    async Task Edit(Kas model)
    {
        var data = new DialogParameters();
        data.Add("model", model);
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<KasDialog>("Tambah", data, options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }

    async Task Delete(Kas model)
    {

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Yakin Hapus Data ?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var deleted = await kasService.Delete(model.Id);
                if (deleted)
                {
                    await table.ReloadServerData();
                    Snackbar?.Add("Data berhasil dihapus !", MudBlazor.Severity.Error);
                    return;
                }
                throw new SystemException("Data tidak berhasil disimpan !");
            }
            catch (Exception ex)
            {
                Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
            }


        }
    }
}
