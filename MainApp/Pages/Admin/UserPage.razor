@layout AdminLayout
@page "/admin/user"
@inject IUserService userService
@inject IDialogService DialogService

<div class="mt-15">

    <div class="d-flex justify-content-between align-items-center">
        <h3>Data UserModel</h3>
        <MudIconButton OnClick="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Medium" />
    </div>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<UserModel>>>(ServerReload))" Dense="true" Hover="true"
              @ref="table">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="nr_field" T="UserModel">User Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="UserModel">Nama</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="UserModel">Role</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="UserModel">Akti</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.UserName</MudTd>
                <MudTd DataLabel="Name">@context.Nama</MudTd>
                <MudTd DataLabel="Name">@context.Role</MudTd>
                <MudTd  DataLabel="Name">
                    <MudCheckBox Checked="@context.Confirm" Disabled=true></MudCheckBox>
                </MudTd>
                <MudTd Style="width:150px">
                    <AuthorizeView Context="authContext">
                        <MudIconButton OnClick="@(()=> Edit(context))" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                        <MudIconButton OnClick="@(()=> Delete(context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteForever"></MudIconButton>
                    </AuthorizeView>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>


    @code {


    [Inject] ISnackbar? Snackbar { get; set; }

    private IEnumerable<UserModel> pagedData;
    private MudTable<UserModel> table;

    private int totalItems;
    private string searchString;

    private async Task<TableData<UserModel>> ServerReload(TableState state)
    {
        IEnumerable<UserModel>? data = await userService.Get();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Nama.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Nama.ToString());
                break;
            case "description_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Role);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<UserModel>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    async Task Add()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<UserDialog>("Tambah", options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }


    async Task Edit(UserModel model)
    {
        var data = new DialogParameters();
        data.Add("model", model);
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<UserDialog>("Tambah", data, options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }

    async Task Delete(UserModel model)
    {

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Yakin Hapus Data ?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var deleted = await userService.Delete(model.Id);
                if (deleted)
                {
                    await table.ReloadServerData();
                    Snackbar?.Add("Data berhasil dihapus !", MudBlazor.Severity.Error);
                    return;
                }
                throw new SystemException("Data tidak berhasil disimpan !");
            }
            catch (Exception ex)
            {
                Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
            }


        }
    }
}
