@layout AdminLayout
@page "/admin/periode"
@inject IPeriodeService kategoriService
@inject IDialogService DialogService

<div class="mt-15">

    <div class="d-flex justify-content-between align-items-center">
        <h3>Data Periode</h3>

        @if (canAdd)
        {
            <MudIconButton OnClick="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Medium" />
        }
    </div>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<Periode>>>(ServerReload))" Dense="true" Hover="true"
              @ref="table">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="nr_field" T="Periode">Tahun</MudTableSortLabel>
            </MudTh>
            <MudTh>Saldo Akhir</MudTh>
            <MudTh>Total Utang Akhir</MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="Periode">Aktif</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Tahun</MudTd>
                <MudTd DataLabel="Nr">@context.SaldoAkhir.ToString("N2")</MudTd>
                <MudTd DataLabel="Nr">@context.UtangAkhir.ToString("N2")</MudTd>
                <MudTd DataLabel="Nr">@context.Status</MudTd>

                <MudTd Style="width:150px">
                    <AuthorizeView Context="authContext">
                        @if (context.CanEdit)
                    {
                        <MudIconButton OnClick="@(()=> Edit(context))" Color="Color.Warning" Icon="@Icons.Material.Filled.Edit"></MudIconButton>
                        <MudIconButton OnClick="@(()=> Delete(context))" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteForever"></MudIconButton>
                    }
                </AuthorizeView>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>


@code {

    [Inject] ISnackbar? Snackbar { get; set; }

    private IEnumerable<Periode> pagedData;
    private MudTable<Periode> table;

    private int totalItems;
    private string searchString;
    bool canAdd;


    private async Task<TableData<Periode>> ServerReload(TableState state)
    {
        IEnumerable<Periode>? data = await kategoriService.Get();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Tahun.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (!string.IsNullOrEmpty(element.Catatan) && element.Catatan.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Tahun.ToString());
                break;
            case "description_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Catatan);
                break;
        }
        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        canAdd = pagedData.Count()==0 ? true : pagedData != null && pagedData.Count() != pagedData.Count(x => x.Status != StatusKas.Setujui);
        await InvokeAsync(() => StateHasChanged());
        return new TableData<Periode>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    async Task Add()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<PeriodeDialog>("Tambah", options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }


    async Task Edit(Periode model)
    {
        var data = new DialogParameters();
        data.Add("model", model);
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<PeriodeDialog>("Edit/Tutup", data, options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }

    async Task Delete(Periode model)
    {

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Yakin Hapus Data ?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var deleted = await kategoriService.Delete(model.Id);
                if (deleted)
                {
                    await table.ReloadServerData();
                    Snackbar?.Add("Data berhasil dihapus !", MudBlazor.Severity.Error);
                    return;
                }
                throw new SystemException("Data tidak berhasil disimpan !");
            }
            catch (Exception ex)
            {
                Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
            }


        }
    }
}
