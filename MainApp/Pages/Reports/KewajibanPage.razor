@page "/laporan/kewajiban"


<div class="mt-15 no-print">

    <div class="d-flex justify-content-between align-items-center">
        <h3>Kewajiban/Utang</h3>
        <MudMenu Label="Menu Kas" Variant="Variant.Outlined" Color="Color.Info">
            <MudMenuItem OnClick="LaporanKas">Cetak</MudMenuItem>
        </MudMenu>

    </div>
    <MudTable Class="p-2" CustomHeader="true" ServerData="@(new Func<TableState, Task<TableData<Kas>>>(ServerReload))"
              Dense="true" Hover="true" RowsPerPage="100"
              @ref="table">
        <ToolBarContent>
            <MudSelect T="Periode" Label="Periode" ValueChanged="OnSelectPeriode">
                @foreach (var item in periodes)
                {
                    <MudSelectItem Value="item">@item.Tahun</MudSelectItem>
                }
            </MudSelect>
            <MudSelect Class="ml-2" T="PeriodeKas" Label="Bulan" ValueChanged="OnSelectPeriodeKas">
                @foreach (var item in periodeKas)
                {
                    <MudSelectItem Value="item">@(Helper.GetBulan(item.Bulan))</MudSelectItem>
                }
            </MudSelect>

            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTHeadRow>
                <MudTh>
                    <MudTableSortLabel SortLabel="nr_field" T="Kas">Tanggal</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="Kas">Kode</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="Kas">Uraian</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel T="Kategori">Kewajiban</MudTableSortLabel>
                </MudTh>
                <MudTh Style="text-align:right">
                    <MudTableSortLabel T="Kas">Pembayaran</MudTableSortLabel>
                </MudTh>
                <MudTh></MudTh>
            </MudTHeadRow>
            <MudTHeadRow>
                <MudTh></MudTh>
                <MudTh></MudTh>
                <MudTh>Saldo Bulan Lalu</MudTh>
                <MudTh Style="text-align:right">@(periodeKasSelected != null ? periodeKasSelected.UtangLalu.ToString("N2") : 0)</MudTh>
                <MudTh></MudTh>
            </MudTHeadRow>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Tanggal">@context.Tanggal.Value.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Kode">@context.Akun.Kode</MudTd>
                <MudTd DataLabel="Uraian">@context.Akun.Uraian</MudTd>
                <MudTd DataLabel="Penerimaan" Style="text-align:right">
                    @(context.Utang.ToString("N2"))
                </MudTd>
                <MudTd DataLabel="Pengeluaran" Style="text-align:right">
                    @(context.Akun.Tipe == AkunType.Pengeluaran ? context.Jumlah.ToString("N2") : "-")
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <FooterContent>
                <MudTh colspan="3">Sisa Utang</MudTh>
                <MudTh Style="text-align:right">@(periodeKasSelected != null ? (periodeKasSelected.UtangLalu + pagedData.Sum(x => x.Utang) - pagedData.Where(x => x.Akun.Tipe == AkunType.Pengeluaran).Sum(x => x.Jumlah)).ToString("N2") : 0)</MudTh>
                <MudTh></MudTh>
            </FooterContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>

    @if (periodeKasSelected != null)
{
    <KewajibanPrint PeriodeKas="periodeKasSelected" Datas="pagedData" />
}


@inject IAkunService akunService
@inject IKasService kasService
@inject IDialogService DialogService
@inject IJSRuntime Js

@code {

    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IPeriodeService? PeriodeService { get; set; }

    private IEnumerable<Kas> pagedData = Enumerable.Empty<Kas>();
    private IEnumerable<Kas> sources = Enumerable.Empty<Kas>();
    private IEnumerable<Periode> periodes;

    IEnumerable<PeriodeKas> periodeKas = Enumerable.Empty<PeriodeKas>();
    private IEnumerable<Akun> akuns;
    private MudTable<Kas> table;

    private int totalItems;
    private string searchString;

    bool isDisable = true;
    Periode periodeSelected;
    PeriodeKas periodeKasSelected;

    bool kasBulanPrint = false;

    private List<PosisiKasModel> DataPrint = new List<PosisiKasModel>();

    protected override async Task OnInitializedAsync()
    {
        periodes = await PeriodeService.Get();
        akuns = await akunService.Get();
    }


    async Task OnSelectPeriode(Periode p)
    {
        if (p == null)
            return;

        periodeSelected = p;
        isDisable = !p.Aktif;
        periodeKas = await kasService.GetPeriodeKasByPeriodeId(p.Id);
    }

    async Task OnSelectPeriodeKas(PeriodeKas p)
    {
        if (p == null)
            return;
        periodeKasSelected = p;
        await table.ReloadServerData();
    }

    async Task LaporanKas()
    {
        kasBulanPrint = true;
        if (periodeSelected != null)
        {
            await InvokeAsync(() => StateHasChanged());
            await Task.Delay(500);
            await Js.InvokeVoidAsync("print");
        }
    }


    private async Task<TableData<Kas>> ServerReload(TableState state)
    {
        if (periodeKasSelected != null)
        {
            IEnumerable<Kas>? data = await kasService.Get(periodeKasSelected.Mulai, periodeKasSelected.Berakhir);
            data = data.Where(x => x.Akun.Sinode > 0 || x.Akun.YPK > 0 || x.Akun.Klasis > 0 || x.Akun.SetoranWajib);
            await Task.Delay(300);
            data = data.Where(element =>
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (element.Akun.Kode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (element.Akun.Uraian.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;

                return false;
            }).ToArray();
            totalItems = data.Count();
            switch (state.SortLabel)
            {
                case "nr_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Akun.Kode);
                    break;
                case "description_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Akun.Uraian);
                    break;
            }
            pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }
        return new TableData<Kas>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

}
