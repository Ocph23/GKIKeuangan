@page "/kas"


<div class="mt-15">

    <div class="d-flex justify-content-between align-items-center">
        <h3>Kas</h3>
        <MudIconButton Disabled=@(isDisable) OnClick="Add" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Medium" />
    </div>
    <MudTable Class="p-2" ServerData="@(new Func<TableState, Task<TableData<Kas>>>(ServerReload))" Dense="true" Hover="true"
              @ref="table">
        <ToolBarContent>
            <MudSelect T="Periode" Label="Periode" ValueChanged="OnSelectPeriode">
                @foreach (var item in periodes)
                {
                    <MudSelectItem Value="item">@item.Tahun</MudSelectItem>
                }
            </MudSelect>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="nr_field" T="Kas">Tanggal</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="Kas">Kode</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel T="Kas">Uraian</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel Style="text-align:right" T="Kategori">Penerimaan</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel Style="text-align:right" T="Kas">Pengeluaran</MudTableSortLabel>
            </MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Tanggal">@context.Tanggal.ToString()</MudTd>
                <MudTd DataLabel="Kode">@context.Akun.Kode</MudTd>
                <MudTd DataLabel="Uraian">@context.Akun.Uraian</MudTd>
                <MudTd DataLabel="Penerimaan" Style="text-align:right">
                    @(context.Akun.Tipe == AkunType.Penerimaan ? context.Jumlah.ToString("N2") : "-")
                </MudTd>
                <MudTd DataLabel="Pengeluaran" Style="text-align:right">
                    @(context.Akun.Tipe == AkunType.Pengeluaran ? context.Jumlah.ToString("N2") : "-")
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>




@inject IAkunService akunService
@inject IKasService kasService
@inject IDialogService DialogService

    @code {


    [Inject] ISnackbar? Snackbar { get; set; }
    [Inject] IPeriodeService? PeriodeService { get; set; }

    private IEnumerable<Kas> pagedData = Enumerable.Empty<Kas>();
    private IEnumerable<Kas> sources = Enumerable.Empty<Kas>();
    private IEnumerable<Periode> periodes;
    private IEnumerable<Akun> akuns;
    private MudTable<Kas> table;

    private int totalItems;
    private string searchString;

    bool isDisable = true;

    protected override async Task OnInitializedAsync()
    {
        periodes = await PeriodeService.Get();
        akuns = await akunService.Get();
    }


    async Task OnSelectPeriode(Periode p)
    {
        if (p == null)
            return;

        isDisable = !p.Aktif;
        sources = await kasService.GetByYear(p.Tahun);
        await table.ReloadServerData();
    }


    private async Task<TableData<Kas>> ServerReload(TableState state)
    {
        IEnumerable<Kas>? data = sources;
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Akun.Kode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (element.Akun.Uraian.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Akun.Kode);
                break;
            case "description_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Akun.Uraian);
                break;
        }


        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new TableData<Kas>() { TotalItems = totalItems, Items = pagedData };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    async Task Add()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<KasDialog>("Tambah", options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }


    async Task Edit(Kas model)
    {
        var data = new DialogParameters();
        data.Add("model", model);
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true, CloseOnEscapeKey = true };
        var resultDialog = await DialogService.ShowAsync<KasDialog>("Tambah", data, options);
        var result = await resultDialog.Result;
        if (result != null)
        {
            await table.ReloadServerData();
        }
    }

    async Task Delete(Kas model)
    {

        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Yakin Hapus Data ?");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var deleted = await kasService.Delete(model.Id);
                if (deleted)
                {
                    await table.ReloadServerData();
                    Snackbar?.Add("Data berhasil dihapus !", MudBlazor.Severity.Error);
                    return;
                }
                throw new SystemException("Data tidak berhasil disimpan !");
            }
            catch (Exception ex)
            {
                Snackbar?.Add(ex.Message, MudBlazor.Severity.Error);
            }


        }
    }
}
