// <auto-generated />
using System;
using MainApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MainApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231128062402__bukanapa2")]
    partial class _bukanapa2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MainApp.Akun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlokasiProsentese")
                        .HasColumnType("boolean");

                    b.Property<double>("Jemaat")
                        .HasColumnType("double precision");

                    b.Property<int>("KategoriId")
                        .HasColumnType("integer");

                    b.Property<string>("Keterangan")
                        .HasColumnType("text");

                    b.Property<double>("Klasis")
                        .HasColumnType("double precision");

                    b.Property<string>("Kode")
                        .HasColumnType("text");

                    b.Property<bool>("SetoranWajib")
                        .HasColumnType("boolean");

                    b.Property<double>("Sinode")
                        .HasColumnType("double precision");

                    b.Property<int>("Tipe")
                        .HasColumnType("integer");

                    b.Property<string>("Uraian")
                        .HasColumnType("text");

                    b.Property<double>("YPK")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.HasIndex("Kode")
                        .IsUnique();

                    b.ToTable("DataAkun");
                });

            modelBuilder.Entity("MainApp.AnggaranBelanjaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkunId")
                        .HasColumnType("integer");

                    b.Property<int>("Kegiatan")
                        .HasColumnType("integer");

                    b.Property<double>("Nilai")
                        .HasColumnType("double precision");

                    b.Property<int?>("PeriodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AkunId");

                    b.HasIndex("PeriodeId");

                    b.ToTable("AnggaranBelanjaItem");
                });

            modelBuilder.Entity("MainApp.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MainApp.Kas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AkunId")
                        .HasColumnType("integer");

                    b.Property<string>("Catatan")
                        .HasColumnType("text");

                    b.Property<double>("Jumlah")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Tanggal")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AkunId");

                    b.ToTable("DataKas");
                });

            modelBuilder.Entity("MainApp.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Deskripsi")
                        .HasColumnType("text");

                    b.Property<string>("Kode")
                        .HasColumnType("text");

                    b.Property<string>("Nama")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Kode")
                        .IsUnique();

                    b.ToTable("DataKategori");
                });

            modelBuilder.Entity("MainApp.Models.PeriodeKas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Berakhir")
                        .HasColumnType("date");

                    b.Property<int>("Bulan")
                        .HasColumnType("integer");

                    b.Property<double>("Jemaat")
                        .HasColumnType("double precision");

                    b.Property<double>("Klasis")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Mulai")
                        .HasColumnType("date");

                    b.Property<double>("PembayaranUtang")
                        .HasColumnType("double precision");

                    b.Property<string>("PemegangKas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Penerimaan")
                        .HasColumnType("double precision");

                    b.Property<double>("Pengeluaran")
                        .HasColumnType("double precision");

                    b.Property<int>("PeriodeId")
                        .HasColumnType("integer");

                    b.Property<double>("SaldoLalu")
                        .HasColumnType("double precision");

                    b.Property<double>("Sinode")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("TanggalPenutupan")
                        .HasColumnType("date");

                    b.Property<double>("UtangLalu")
                        .HasColumnType("double precision");

                    b.Property<double>("YPK")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PeriodeId");

                    b.ToTable("PeriodeKas");
                });

            modelBuilder.Entity("MainApp.Periode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktif")
                        .HasColumnType("boolean");

                    b.Property<string>("Catatan")
                        .HasColumnType("text");

                    b.Property<double>("SaldoAkhir")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tahun")
                        .HasColumnType("integer");

                    b.Property<double>("UtangAkhir")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Tahun")
                        .IsUnique();

                    b.ToTable("DataPeriode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MainApp.Akun", b =>
                {
                    b.HasOne("MainApp.Kategori", "Kategori")
                        .WithMany()
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("MainApp.AnggaranBelanjaItem", b =>
                {
                    b.HasOne("MainApp.Akun", "Akun")
                        .WithMany()
                        .HasForeignKey("AkunId");

                    b.HasOne("MainApp.Periode", null)
                        .WithMany("RencanaAnggaranBalanja")
                        .HasForeignKey("PeriodeId");

                    b.Navigation("Akun");
                });

            modelBuilder.Entity("MainApp.Kas", b =>
                {
                    b.HasOne("MainApp.Akun", "Akun")
                        .WithMany()
                        .HasForeignKey("AkunId");

                    b.Navigation("Akun");
                });

            modelBuilder.Entity("MainApp.Models.PeriodeKas", b =>
                {
                    b.HasOne("MainApp.Periode", "Periode")
                        .WithMany()
                        .HasForeignKey("PeriodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Periode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MainApp.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MainApp.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MainApp.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MainApp.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MainApp.Periode", b =>
                {
                    b.Navigation("RencanaAnggaranBalanja");
                });
#pragma warning restore 612, 618
        }
    }
}
